{"title":"PyPaimon Release 0.2.0","type":"release","content":"<p>Dec 19, 2024 - Zelin Yu (<a href=\"mailto:yuzelin.yzl@gmail.com\" target=\"_blank\" title=\"undefined\" rel=\"noopener\">yuzelin.yzl@gmail.com</a>)</p>\n<p>The Apache Paimon PMC officially announces the release of PyPaimon 0.2.0. Because we didn&#39;t release 0.1.0,\nthis is the first version.</p>\n<h2 id=\"what-is-pypaimon\">What is PyPaimon?</h2><p><a href=\"https://github.com/apache/paimon-python\" target=\"_blank\" title=\"null\" rel=\"noopener\">PyPaimon</a> is the Python SDK of Apache Paimon. It provides a way\nfor users to get data from Paimon tables with Python for data analysis, and write data back to Paimon tables.</p>\n<h2 id=\"version-overview\">Version Overview</h2><p>The first version of PyPaimon supports following features:</p>\n<ol>\n<li>Connect to <code>Catalog</code>.</li>\n<li>Get or create table.</li>\n<li>Batch read: Filter and projection pushdown, and parallelly reading data as Apache Arrow, Pandas, DuckDB and Ray format.</li>\n<li>Batch write: Insert into or overwrite table with Apache Arrow and Pandas data.</li>\n</ol>\n<p>The detailed document can found at <a href=\"https://paimon.apache.org/docs/master/program-api/python-api/\" target=\"_blank\" title=\"undefined\" rel=\"noopener\">https://paimon.apache.org/docs/master/program-api/python-api/</a>.</p>\n<h3 id=\"connect-to-catalog\">Connect to Catalog</h3><p>You can create a <code>Catalog</code> with options just like in SQL:</p>\n<pre class=\"code\"><code>from pypaimon<span class=\"token punctuation\">.</span>py4j <span class=\"token keyword\">import</span> <span class=\"token class-name\">Catalog</span>\n\ncatalog_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  'warehouse<span class=\"token char\">': '</span>path<span class=\"token operator\">/</span><span class=\"token keyword\">to</span><span class=\"token operator\">/</span>warehouse'<span class=\"token punctuation\">,</span>\n  'metastore<span class=\"token char\">': '</span>filesystem'\n  # other options\n<span class=\"token punctuation\">}</span>\n\ncatalog <span class=\"token operator\">=</span> <span class=\"token class-name\">Catalog</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>catalog_options<span class=\"token punctuation\">)</span></code></pre><p>You can connect to any <code>Catalog</code> supported by Java. PyPaimon has built-in support for <code>filesystem</code>, <code>Jdbc</code> and <code>hive</code> catalog.\nIf you want to connect to your self-defined catalogs, you can add the dependency jars in following way:</p>\n<pre class=\"code\"><code><span class=\"token keyword\">import</span> <span class=\"token namespace\">os</span>\nfrom pypaimon<span class=\"token punctuation\">.</span>py4j <span class=\"token keyword\">import</span> <span class=\"token namespace\">constants</span>\n\nos<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span>constants<span class=\"token punctuation\">.</span><span class=\"token constant\">PYPAIMON_JAVA_CLASSPATH</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> '<span class=\"token operator\">/</span>path<span class=\"token operator\">/</span><span class=\"token keyword\">to</span><span class=\"token operator\">/</span>jars<span class=\"token comment\">/*'</span></code></pre><h3 id=\"get-or-create-table\">Get or create table</h3><p>You can get a existed table from <code>Catalog</code> by its identifier:</p>\n<pre class=\"code\"><code>table <span class=\"token operator\">=</span> catalog<span class=\"token punctuation\">.</span><span class=\"token function\">get_table</span><span class=\"token punctuation\">(</span>'database_name<span class=\"token punctuation\">.</span>table_name'<span class=\"token punctuation\">)</span></code></pre><p>You can also create a new table. The table field definitions are described by <code>pyarrow.Schema</code>, and you can set primary keys,\npartition keys, table options and comment.</p>\n<pre class=\"code\"><code><span class=\"token keyword\">import</span> <span class=\"token namespace\">pyarrow</span> as pa\nfrom pypaimon <span class=\"token keyword\">import</span> <span class=\"token class-name\">Schema</span>\n\n# field definitions\npa_schema <span class=\"token operator\">=</span> pa<span class=\"token punctuation\">.</span><span class=\"token function\">schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token char\">'dt'</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token char\">'hh'</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token char\">'pk'</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">.</span><span class=\"token function\">int64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token char\">'value'</span><span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n# table schema\nschema <span class=\"token operator\">=</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span>\n    pa_schema<span class=\"token operator\">=</span>pa_schema<span class=\"token punctuation\">,</span> \n    partition_keys<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'dt'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'hh'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    primary_keys<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token char\">'dt'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'hh'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'pk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token char\">'bucket'</span><span class=\"token operator\">:</span> <span class=\"token char\">'2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    comment<span class=\"token operator\">=</span>'my test table'\n<span class=\"token punctuation\">)</span>\n\n# create table \ncatalog<span class=\"token punctuation\">.</span><span class=\"token function\">create_table</span><span class=\"token punctuation\">(</span>identifier<span class=\"token operator\">=</span>'<span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>test_table'<span class=\"token punctuation\">,</span> schema<span class=\"token operator\">=</span>schema<span class=\"token punctuation\">,</span> ignore_if_exists<span class=\"token operator\">=</span><span class=\"token class-name\">False</span><span class=\"token punctuation\">)</span></code></pre><p>Then you can get table read and write interfaces from table.</p>\n<h2 id=\"batch-read\">Batch read</h2><p>Assume that you already hava the table <code>default.test_table</code> described in the previous section. Let&#39;s see how to read data from it.</p>\n<pre class=\"code\"><code>from pypaimon<span class=\"token punctuation\">.</span>py4j <span class=\"token keyword\">import</span> <span class=\"token class-name\">Catalog</span>\n\n# set 'max<span class=\"token operator\">-</span>workers' <span class=\"token punctuation\">(</span>thread numbers<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> parallelly reading\ncatalog_options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  'warehouse<span class=\"token char\">': '</span>path<span class=\"token operator\">/</span><span class=\"token keyword\">to</span><span class=\"token operator\">/</span>warehouse'<span class=\"token punctuation\">,</span>\n  'metastore<span class=\"token char\">': '</span>filesystem'<span class=\"token punctuation\">,</span>\n  'max<span class=\"token operator\">-</span>workers<span class=\"token char\">': '</span><span class=\"token number\">4</span>'\n<span class=\"token punctuation\">}</span>\ncatalog <span class=\"token operator\">=</span> <span class=\"token class-name\">Catalog</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>catalog_options<span class=\"token punctuation\">)</span>\ntable <span class=\"token operator\">=</span> catalog<span class=\"token punctuation\">.</span><span class=\"token function\">get_table</span><span class=\"token punctuation\">(</span>'<span class=\"token keyword\">default</span><span class=\"token punctuation\">.</span>test_table'<span class=\"token punctuation\">)</span>\n\n# use <span class=\"token class-name\">ReadBuilder</span> <span class=\"token keyword\">to</span> <span class=\"token namespace\">perform</span> filter and projection pushdown\nread_builder <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">new_read_builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# select partition<span class=\"token operator\">:</span> dt<span class=\"token operator\">=</span>'<span class=\"token number\">2024</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token char\">',hh='</span><span class=\"token number\">12</span>'\npredicate_builder <span class=\"token operator\">=</span> read_builder<span class=\"token punctuation\">.</span><span class=\"token function\">new_predicate_builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ndt_predicate <span class=\"token operator\">=</span> predicate_builder<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token char\">'dt'</span><span class=\"token punctuation\">,</span> '<span class=\"token number\">2024</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token operator\">-</span><span class=\"token number\">01</span>'<span class=\"token punctuation\">)</span>\ndt_hh <span class=\"token operator\">=</span> predicate_builder<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token char\">'hh'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'12'</span><span class=\"token punctuation\">)</span>\npartition_predicate <span class=\"token operator\">=</span> predicate_builder<span class=\"token punctuation\">.</span><span class=\"token function\">and_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dt_predicate<span class=\"token punctuation\">,</span> dt_hh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nread_builder <span class=\"token operator\">=</span> read_builder<span class=\"token punctuation\">.</span><span class=\"token function\">with_filter</span><span class=\"token punctuation\">(</span>partition_predicate<span class=\"token punctuation\">)</span>\n\n# select pk and value\nread_builder <span class=\"token operator\">=</span> read_builder<span class=\"token punctuation\">.</span><span class=\"token function\">with_projection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token char\">'pk'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'value'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n# plan splits\ntable_scan <span class=\"token operator\">=</span> read_builder<span class=\"token punctuation\">.</span><span class=\"token function\">new_scan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsplits <span class=\"token operator\">=</span> table_scan<span class=\"token punctuation\">.</span><span class=\"token function\">splits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# read data <span class=\"token keyword\">to</span> <span class=\"token namespace\">pandas<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataFrame</span>\ndf <span class=\"token operator\">=</span> table_read<span class=\"token punctuation\">.</span><span class=\"token function\">to_pandas</span><span class=\"token punctuation\">(</span>splits<span class=\"token punctuation\">)</span></code></pre><p>Then you can do some analysis on the dataframe with Python.</p>\n<h2 id=\"batch-write\">Batch Write</h2><p>Assume that you already hava the table <code>default.test_table</code> described in the previous section. Let&#39;s see how to write or overwrite it.</p>\n<p>First, assume that you have a dataframe data of 2024-12-02, 12 o&#39;clock, and you want to write it into the table.</p>\n<pre class=\"code\"><code>write_builder <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">new_batch_write_builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_write <span class=\"token operator\">=</span> write_builder<span class=\"token punctuation\">.</span><span class=\"token function\">new_write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_commit <span class=\"token operator\">=</span> write_builder<span class=\"token punctuation\">.</span><span class=\"token function\">new_commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# you can write data many times before committing\ndataframe <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ntable_write<span class=\"token punctuation\">.</span><span class=\"token function\">write_pandas</span><span class=\"token punctuation\">(</span>dataframe<span class=\"token punctuation\">)</span>\n\ncommit_messages <span class=\"token operator\">=</span> table_write<span class=\"token punctuation\">.</span><span class=\"token function\">prepare_commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_commit<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>commit_messages<span class=\"token punctuation\">)</span>\n\ntable_write<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_commit<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><p>Let&#39;s see how to overwrite the partition &#39;dt=2024-12-02,hh=12&#39; with new data.</p>\n<pre class=\"code\"><code>write_builder <span class=\"token operator\">=</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">new_batch_write_builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n# set partition <span class=\"token keyword\">to</span> <span class=\"token namespace\">overwrite</span>\nwrite_builder <span class=\"token operator\">=</span> write_builder<span class=\"token punctuation\">.</span><span class=\"token function\">overwrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token char\">'dt'</span><span class=\"token operator\">:</span> '<span class=\"token number\">2024</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token char\">', '</span>hh<span class=\"token char\">': '</span><span class=\"token number\">12</span>'<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ntable_write <span class=\"token operator\">=</span> write_builder<span class=\"token punctuation\">.</span><span class=\"token function\">new_write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_commit <span class=\"token operator\">=</span> write_builder<span class=\"token punctuation\">.</span><span class=\"token function\">new_commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n# then write data\ndataframe <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\ntable_write<span class=\"token punctuation\">.</span><span class=\"token function\">write_pandas</span><span class=\"token punctuation\">(</span>dataframe<span class=\"token punctuation\">)</span>\n\ncommit_messages <span class=\"token operator\">=</span> table_write<span class=\"token punctuation\">.</span><span class=\"token function\">prepare_commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_commit<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>commit_messages<span class=\"token punctuation\">)</span>\n\ntable_write<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntable_commit<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre><h3 id=\"various-data-formats\">Various data formats</h3><p>PyPaimon supports reading data in following formats: Pandas, Apache Arrow and DuckDB, and writing data in following\nformats: Pandas, Apache Arrow. Please refer to the <a href=\"https://paimon.apache.org/docs/master/program-api/python-api/\" target=\"_blank\" title=\"null\" rel=\"noopener\">document</a> for details.</p>\n","toc":[{"depth":2,"text":"What is PyPaimon?","id":"what-is-pypaimon"},{"depth":2,"text":"Version Overview","id":"version-overview"},{"depth":3,"text":"Connect to Catalog","id":"connect-to-catalog"},{"depth":3,"text":"Get or create table","id":"get-or-create-table"},{"depth":2,"text":"Batch read","id":"batch-read"},{"depth":2,"text":"Batch Write","id":"batch-write"},{"depth":3,"text":"Various data formats","id":"various-data-formats"}],"alias":"release-pypaimon-0.2.0","version":"pypaimon-0.2.0","weight":91}